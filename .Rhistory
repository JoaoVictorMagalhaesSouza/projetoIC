#Tirar os duplicados
df_emp <-  df_emp[!duplicated(df_emp), ]
#Tirar as empresas que nao tem um pregao
df_emp <- df_emp %>% filter(tickers!="")
names(df_emp) = c("Nome","Setor","Subsetor","Segmento","Tickers")
#Remover espacos entre as strings
df_emp$Nome    <- str_squish(df_emp$Nome    )
df_emp$Setor   <- str_squish(df_emp$Setor   )
df_emp$Subsetor<- str_squish(df_emp$Subsetor)
df_emp$Segmento<- str_squish(df_emp$Segmento)
df_emp$Tickers <- str_squish(df_emp$Tickers )
df_emp$Nome    <- str_trim(df_emp$Nome    )
df_emp$Setor   <- str_trim(df_emp$Setor   )
df_emp$Subsetor<- str_trim(df_emp$Subsetor)
df_emp$Segmento<- str_trim(df_emp$Segmento)
df_emp$Tickers <- str_trim(df_emp$Tickers )
#Colocar em caixa alta
df_emp$Nome    <- str_to_upper(df_emp$Nome    )
df_emp$Setor   <- str_to_upper(df_emp$Setor   )
df_emp$Subsetor<- str_to_upper(df_emp$Subsetor)
df_emp$Segmento<- str_to_upper(df_emp$Segmento)
df_emp$Tickers <- str_to_upper(df_emp$Tickers )
####################################################################
##Funcoes auxiliares:
#############################################################
#Funcao para verificar se determinado ativo esta no BD Yahoo.
verificar_coluna <- function(data, coluna){
retorno <- coluna
retorno %in% names(data)
}
#Funcao para listar todos os setores
listaTodosSetores <- function(df_emp){
setores = subset(df_emp, select = c(2))
setores = setores[!duplicated(setores),]
return(setores)
}
listaSetores  <- listaTodosSetores(df_emp)
#Funcao para listar as acoes de um setor
listaAcoesUmSetor <- function(df_emp,setorMonitorado){
setor = setorMonitorado
#Pegar todas as empresas desse setor
Acoes_Filtradas = subset(df_emp,df_emp[2]==setor)
#Pegar todos os tickers dessas empresas desse setor
Acoes_Filtradas_lista = Acoes_Filtradas$Tickers
nlinhas <- nrow(Acoes_Filtradas)
numcol = ncol(BancoDeDados_Acoes)
#Pegando a coluna "Data" do BancoDeDados_Acoes para fazer um join depois
df_setor <- data.frame(Data=c(BancoDeDados_Acoes[1]))
#Vamos conferir quais  os tickers desse BD Auxiliar(no setor escolhido) estao no BD do Yahoo.
for(i in 1:nlinhas){
tickers = strsplit(Acoes_Filtradas_lista[i],";")
for (j in 1:length(tickers[[1]])){
aux <- paste(tickers[[1]][j],"SA",sep=".")
if (verificar_coluna(BancoDeDados_Acoes,aux)){
df_setor[aux] =  select(BancoDeDados_Acoes,aux)
}
}
}
acoesDoSetor <- colnames(df_setor)
return(acoesDoSetor)
}
setorMonitorado = "SAÚDE"
teste <- listaAcoesUmSetor(df_emp,setorMonitorado)
teste <- teste[-1] #Tirar o nome Data
#######################################################
#Parte de plotagem de gráficos:
########################################################
########################################################
#Serie temporal de uma unica acao:
########################################################
serieTempAtivo <- function(df_emp,acao){
#Plotagem do resultado
plott <- BancoDeDados_Acoes %>%
select(Data,acao)  %>%
melt(id.var = "Data") %>%
ggplot(aes(Data,value))+geom_line(aes(colour = variable))
ggplotly(plott)
}
#Chamando a funcao acima para ver a serie temporal de um setor.
acao = "BBDC4.SA"
serieTempAtivo(df_emp,acao)
########################################################
#Serie temporal de um setor (todas as acoes desse setor)
########################################################
serieTempSetor <- function(df_emp,setorMonitorado){
#aux <- "B3SA3.SA"
#verificar_coluna(BancoDeDados_Acoes,aux)
#Escolher um setor específico
setor = setorMonitorado #setores[[1]][9]    #Saúde
#Pegar todas as empresas desse setor:
Acoes_Filtradas = subset(df_emp,df_emp[2]==setor)
#Pegar todos os tickers dessas empresas desse setor:
Acoes_Filtradas_lista = Acoes_Filtradas$Tickers
#Obter o numero de linhas do BD das acoes do setor especificado
nlinhas <- nrow(Acoes_Filtradas)
#Conferir coluna a coluna
numcol = ncol(BancoDeDados_Acoes)
#Pegando a coluna "Data" do BancoDeDados_Acoes
df_setor <- data.frame(Data=c(BancoDeDados_Acoes[1]))
#Vamos conferir quais  os tickers desse BD Auxiliar(no setor escolhido) estao no BD do Yahoo.
for(i in 1:nlinhas){
tickers = strsplit(Acoes_Filtradas_lista[i],";")
for (j in 1:length(tickers[[1]])){
aux <- paste(tickers[[1]][j],"SA",sep=".")
if (verificar_coluna(BancoDeDados_Acoes,aux)){
df_setor[aux] =  select(BancoDeDados_Acoes,aux)
}
}
}
#Plotagem do resultado
plott <- df_setor %>%
melt(id.var = "Data") %>%
ggplot(aes(Data,value))+geom_line(aes(colour = variable))
ggplotly(plott)
}
#Chamando a funcao acima para ver a serie temporal de um setor.
#No shiny criaremos uma listBox para o usuario escolher o setor.
setorMonitorado = "CONSUMO CÍCLICO"
serieTempSetor(df_emp,setorMonitorado)
########################################################
#Serie temporal de determinadas acoes de um setor:
########################################################
serieTempAlgumasAcoesSetor <- function(df_emp,setorMonitorado,listaAcoes){
#setores = subset(df_emp, select = c(2))
#setores = setores[!duplicated(setores),]
#Escolher um setor específico
setor = setorMonitorado #setores[[1]][9]    #Saúde
#Pegar todas as empresas desse setor:
Acoes_Filtradas = subset(df_emp,df_emp[2]==setor)
#Pegar todos os tickers dessas empresas desse setor:
Acoes_Filtradas_lista = Acoes_Filtradas$Tickers
#Obter o numero de linhas do BD das acoes do setor especificado
nlinhas <- nrow(Acoes_Filtradas)
#Conferir coluna a coluna
numcol = ncol(BancoDeDados_Acoes)
#Pegando a coluna "Data" do BancoDeDados_Acoes
df_setor <- data.frame(Data=c(BancoDeDados_Acoes[1]))
#Vamos conferir quais  os tickers desse BD Auxiliar(no setor escolhido) estao no BD do Yahoo.
for(i in 1:nlinhas){
tickers = strsplit(Acoes_Filtradas_lista[i],";")
for (j in 1:length(tickers[[1]])){
aux <- paste(tickers[[1]][j],"SA",sep=".")
if (verificar_coluna(BancoDeDados_Acoes,aux)){
df_setor[aux] =  select(BancoDeDados_Acoes,aux)
}
}
}
#Plotagem do resultado
plott <- df_setor %>%
select(Data,listaAcoes) %>%
melt(id.var = "Data") %>%
ggplot(aes(Data,value))+geom_line(aes(colour = variable))
ggplotly(plott)
}
#Passaremos a lista com as acoes que o usuario quer monitorar e o setor tambem.
listaAcoes <- c("FLRY3.SA","RADL3.SA")
setorMonitorado <- "SAÚDE"
serieTempAlgumasAcoesSetor(df_emp,setorMonitorado,listaAcoes)
########################################################
#Nuvem de palavras:
#######################################################
geraNuvem <- function(acao){
setup_twitter_oauth("GO2vKO8fZPICcYFry4WcbS397", "HReBTbs6fLVm4PhCpTjWdMJn82kAg8gX6BHHtv307vP5D0SCKt", "1402605860891791364-LKt10SqzmAEG652nP9YtveYu6JxVE0", "yTbybjYtbBqRZtbqNhGhFjzX861oHqLTzmxkaqtgCPb8R")
tweets <- searchTwitter(acao,lang="pt", n = 100)
#Transformar lista em DF
tweets <- tweets %>% twListToDF()
view(tweets)
tweetsText <- tweets$text
docs <- Corpus(VectorSource(tweetsText))
docs <- docs %>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(stripWhitespace)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeWords, stopwords("portuguese"))
dtm <- TermDocumentMatrix(docs)
matrix <- as.matrix(dtm)
words <- sort(rowSums(matrix),decreasing=TRUE)
df <- data.frame(word = names(words),freq=words)
set.seed(1234)
wordcloud(words = df$word, freq = df$freq, min.freq = 1,           max.words=50, random.order=FALSE, rot.per=0.35,  colors=brewer.pal(8, "Dark2"))
#wordcloud2(data=df, size=1.6, color='random-dark')
}
geraNuvem("League of Legends")
setup_twitter_oauth("GO2vKO8fZPICcYFry4WcbS397", "HReBTbs6fLVm4PhCpTjWdMJn82kAg8gX6BHHtv307vP5D0SCKt", "1402605860891791364-LKt10SqzmAEG652nP9YtveYu6JxVE0", "yTbybjYtbBqRZtbqNhGhFjzX861oHqLTzmxkaqtgCPb8R")
########################################################
#Nuvem de palavras:
#######################################################
setup_twitter_oauth("GO2vKO8fZPICcYFry4WcbS397", "HReBTbs6fLVm4PhCpTjWdMJn82kAg8gX6BHHtv307vP5D0SCKt", "1402605860891791364-LKt10SqzmAEG652nP9YtveYu6JxVE0", "yTbybjYtbBqRZtbqNhGhFjzX861oHqLTzmxkaqtgCPb8R")
rm(list=ls())
if(!is.null(dev.list())) dev.off()
cat("\014")
library(BatchGetSymbols)
library(tidyverse)
library(stringr)
library(plyr)
library(plotly)
library(reshape2)
#library(quantmod)
#library(GetDFPData)
#library(GetDFPData2)
library("twitteR")
library("wordcloud")
library("tm")
library("wordcloud2")
library("RColorBrewer")
#
#library(ggthemes)
## O preço de fechamento corresponde ao último valor que o ativo foi negociado em uma sessão.
## O preço ajustado é o preço de fechamento com alguns ajustes de desdobramentos e dividendos(dividendo é uma métrica declarada pela empresa, tipo juros).
------------------------------------------#acao = 'BBDC3.sa' #Empresa.sa -> para analisar alguma empresa em espec.
DI = '2015-01-01' #Data de inicio
DF = Sys.Date() #Data de fim(hoje)
benchmark = '^BVSP' #índice da bolsa
tickersIbov = GetIbovStocks() #Retorna as ações negociadas do Brasil, dados completos.
tickersIbov$tickersSA = paste(tickersIbov$tickers,".SA",sep='') #Criar uma coluna e adicionar o .SA nos tickers
IBOVdatabase = BatchGetSymbols(
tickers = tickersIbov$tickersSA, #Especificando as ações
first.date = DI,
last.date= DF,
bench.ticker = benchmark)
#Pegando o segundo elemento da lista retornada, que e o que contem os dados.
IBOVdatabase = IBOVdatabase$df.tickers
#Selecao de colunas de interesse
IBOVdatabase <- IBOVdatabase %>%
select(-c(5,9,10))
#Estrutura do banco de dados
str(IBOVdatabase)
rm(tickersIbov)
#Lista com varios dataframes de acordo com as acoes presentes em IBOVdatabase
IBOVdatabase = dlply(IBOVdatabase,.(ticker),function(x){rownames(x)=x$row;x$row=NULL;x})
#Resumir o Banco de Dados
BancoDeDados_Acoes = IBOVdatabase[[1]][,c(6,5)] #Extrair as colunas 7 e 6 do dataframe 1
colnames(BancoDeDados_Acoes) = c("Data",paste(IBOVdatabase[[1]][1,7])) #Renomeando as colunas
#teste <- IBOVdatabase[[1]]
for(i in 2:length(IBOVdatabase)){
itera_BancoDeDados_Acoes = IBOVdatabase[[i]][,c(6,5)]
colnames(itera_BancoDeDados_Acoes) = c("Data",paste(IBOVdatabase[[i]][1,7])) #Renomeando as colunas
BancoDeDados_Acoes = merge(BancoDeDados_Acoes,itera_BancoDeDados_Acoes, by = "Data") #Juntando os dataframes usando a Data como coluna chave para fazer os joins.
}
rm(itera_BancoDeDados_Acoes)
#rm(IBOVdatabase)
#df_info = get_info_companies()
#names(df_info)
#Tratamento para comecar a partir de 2016
BancoDeDados_Acoes = BancoDeDados_Acoes[-(1:184),]
##Banco de Dados mais apurado com descrição e os tickers.
df_emp <-  GetDFPData::gdfpd.get.info.companies()
df_emp <-  df_emp %>% select(c(1,11:14))
#Tirar os duplicados
df_emp <-  df_emp[!duplicated(df_emp), ]
#Tirar as empresas que nao tem um pregao
df_emp <- df_emp %>% filter(tickers!="")
names(df_emp) = c("Nome","Setor","Subsetor","Segmento","Tickers")
#Remover espacos entre as strings
df_emp$Nome    <- str_squish(df_emp$Nome    )
df_emp$Setor   <- str_squish(df_emp$Setor   )
df_emp$Subsetor<- str_squish(df_emp$Subsetor)
df_emp$Segmento<- str_squish(df_emp$Segmento)
df_emp$Tickers <- str_squish(df_emp$Tickers )
df_emp$Nome    <- str_trim(df_emp$Nome    )
df_emp$Setor   <- str_trim(df_emp$Setor   )
df_emp$Subsetor<- str_trim(df_emp$Subsetor)
df_emp$Segmento<- str_trim(df_emp$Segmento)
df_emp$Tickers <- str_trim(df_emp$Tickers )
#Colocar em caixa alta
df_emp$Nome    <- str_to_upper(df_emp$Nome    )
df_emp$Setor   <- str_to_upper(df_emp$Setor   )
df_emp$Subsetor<- str_to_upper(df_emp$Subsetor)
df_emp$Segmento<- str_to_upper(df_emp$Segmento)
df_emp$Tickers <- str_to_upper(df_emp$Tickers )
####################################################################
##Funcoes auxiliares:
#############################################################
#Funcao para verificar se determinado ativo esta no BD Yahoo.
verificar_coluna <- function(data, coluna){
retorno <- coluna
retorno %in% names(data)
}
#Funcao para listar todos os setores
listaTodosSetores <- function(df_emp){
setores = subset(df_emp, select = c(2))
setores = setores[!duplicated(setores),]
return(setores)
}
listaSetores  <- listaTodosSetores(df_emp)
#Funcao para listar as acoes de um setor
listaAcoesUmSetor <- function(df_emp,setorMonitorado){
setor = setorMonitorado
#Pegar todas as empresas desse setor
Acoes_Filtradas = subset(df_emp,df_emp[2]==setor)
#Pegar todos os tickers dessas empresas desse setor
Acoes_Filtradas_lista = Acoes_Filtradas$Tickers
nlinhas <- nrow(Acoes_Filtradas)
numcol = ncol(BancoDeDados_Acoes)
#Pegando a coluna "Data" do BancoDeDados_Acoes para fazer um join depois
df_setor <- data.frame(Data=c(BancoDeDados_Acoes[1]))
#Vamos conferir quais  os tickers desse BD Auxiliar(no setor escolhido) estao no BD do Yahoo.
for(i in 1:nlinhas){
tickers = strsplit(Acoes_Filtradas_lista[i],";")
for (j in 1:length(tickers[[1]])){
aux <- paste(tickers[[1]][j],"SA",sep=".")
if (verificar_coluna(BancoDeDados_Acoes,aux)){
df_setor[aux] =  select(BancoDeDados_Acoes,aux)
}
}
}
acoesDoSetor <- colnames(df_setor)
return(acoesDoSetor)
}
setorMonitorado = "SAÚDE"
teste <- listaAcoesUmSetor(df_emp,setorMonitorado)
teste <- teste[-1] #Tirar o nome Data
#######################################################
#Parte de plotagem de gráficos:
########################################################
########################################################
#Serie temporal de uma unica acao:
########################################################
serieTempAtivo <- function(df_emp,acao){
#Plotagem do resultado
plott <- BancoDeDados_Acoes %>%
select(Data,acao)  %>%
melt(id.var = "Data") %>%
ggplot(aes(Data,value))+geom_line(aes(colour = variable))
ggplotly(plott)
}
#Chamando a funcao acima para ver a serie temporal de um setor.
acao = "BBDC4.SA"
serieTempAtivo(df_emp,acao)
########################################################
#Serie temporal de um setor (todas as acoes desse setor)
########################################################
serieTempSetor <- function(df_emp,setorMonitorado){
#aux <- "B3SA3.SA"
#verificar_coluna(BancoDeDados_Acoes,aux)
#Escolher um setor específico
setor = setorMonitorado #setores[[1]][9]    #Saúde
#Pegar todas as empresas desse setor:
Acoes_Filtradas = subset(df_emp,df_emp[2]==setor)
#Pegar todos os tickers dessas empresas desse setor:
Acoes_Filtradas_lista = Acoes_Filtradas$Tickers
#Obter o numero de linhas do BD das acoes do setor especificado
nlinhas <- nrow(Acoes_Filtradas)
#Conferir coluna a coluna
numcol = ncol(BancoDeDados_Acoes)
#Pegando a coluna "Data" do BancoDeDados_Acoes
df_setor <- data.frame(Data=c(BancoDeDados_Acoes[1]))
#Vamos conferir quais  os tickers desse BD Auxiliar(no setor escolhido) estao no BD do Yahoo.
for(i in 1:nlinhas){
tickers = strsplit(Acoes_Filtradas_lista[i],";")
for (j in 1:length(tickers[[1]])){
aux <- paste(tickers[[1]][j],"SA",sep=".")
if (verificar_coluna(BancoDeDados_Acoes,aux)){
df_setor[aux] =  select(BancoDeDados_Acoes,aux)
}
}
}
#Plotagem do resultado
plott <- df_setor %>%
melt(id.var = "Data") %>%
ggplot(aes(Data,value))+geom_line(aes(colour = variable))
ggplotly(plott)
}
#Chamando a funcao acima para ver a serie temporal de um setor.
#No shiny criaremos uma listBox para o usuario escolher o setor.
setorMonitorado = "CONSUMO CÍCLICO"
serieTempSetor(df_emp,setorMonitorado)
########################################################
#Serie temporal de determinadas acoes de um setor:
########################################################
serieTempAlgumasAcoesSetor <- function(df_emp,setorMonitorado,listaAcoes){
#setores = subset(df_emp, select = c(2))
#setores = setores[!duplicated(setores),]
#Escolher um setor específico
setor = setorMonitorado #setores[[1]][9]    #Saúde
#Pegar todas as empresas desse setor:
Acoes_Filtradas = subset(df_emp,df_emp[2]==setor)
#Pegar todos os tickers dessas empresas desse setor:
Acoes_Filtradas_lista = Acoes_Filtradas$Tickers
#Obter o numero de linhas do BD das acoes do setor especificado
nlinhas <- nrow(Acoes_Filtradas)
#Conferir coluna a coluna
numcol = ncol(BancoDeDados_Acoes)
#Pegando a coluna "Data" do BancoDeDados_Acoes
df_setor <- data.frame(Data=c(BancoDeDados_Acoes[1]))
#Vamos conferir quais  os tickers desse BD Auxiliar(no setor escolhido) estao no BD do Yahoo.
for(i in 1:nlinhas){
tickers = strsplit(Acoes_Filtradas_lista[i],";")
for (j in 1:length(tickers[[1]])){
aux <- paste(tickers[[1]][j],"SA",sep=".")
if (verificar_coluna(BancoDeDados_Acoes,aux)){
df_setor[aux] =  select(BancoDeDados_Acoes,aux)
}
}
}
#Plotagem do resultado
plott <- df_setor %>%
select(Data,listaAcoes) %>%
melt(id.var = "Data") %>%
ggplot(aes(Data,value))+geom_line(aes(colour = variable))
ggplotly(plott)
}
#Passaremos a lista com as acoes que o usuario quer monitorar e o setor tambem.
listaAcoes <- c("FLRY3.SA","RADL3.SA")
setorMonitorado <- "SAÚDE"
serieTempAlgumasAcoesSetor(df_emp,setorMonitorado,listaAcoes)
rm(list=ls())
if(!is.null(dev.list())) dev.off()
cat("\014")
library(BatchGetSymbols)
library(tidyverse)
library(stringr)
library(plyr)
library(plotly)
library(reshape2)
#library(quantmod)
#library(GetDFPData)
#library(GetDFPData2)
library("twitteR")
library("wordcloud")
library("tm")
library("wordcloud2")
library("RColorBrewer")
#
#library(ggthemes)
## O preço de fechamento corresponde ao último valor que o ativo foi negociado em uma sessão.
## O preço ajustado é o preço de fechamento com alguns ajustes de desdobramentos e dividendos(dividendo é uma métrica declarada pela empresa, tipo juros).
------------------------------------------#acao = 'BBDC3.sa' #Empresa.sa -> para analisar alguma empresa em espec.
DI = '2015-01-01' #Data de inicio
DF = Sys.Date() #Data de fim(hoje)
benchmark = '^BVSP' #índice da bolsa
tickersIbov = GetIbovStocks() #Retorna as ações negociadas do Brasil, dados completos.
tickersIbov$tickersSA = paste(tickersIbov$tickers,".SA",sep='') #Criar uma coluna e adicionar o .SA nos tickers
IBOVdatabase = BatchGetSymbols(
tickers = tickersIbov$tickersSA, #Especificando as ações
first.date = DI,
last.date= DF,
bench.ticker = benchmark)
#Pegando o segundo elemento da lista retornada, que e o que contem os dados.
IBOVdatabase = IBOVdatabase$df.tickers
#Selecao de colunas de interesse
IBOVdatabase <- IBOVdatabase %>%
select(-c(5,9,10))
#Estrutura do banco de dados
str(IBOVdatabase)
rm(tickersIbov)
#Lista com varios dataframes de acordo com as acoes presentes em IBOVdatabase
IBOVdatabase = dlply(IBOVdatabase,.(ticker),function(x){rownames(x)=x$row;x$row=NULL;x})
#Resumir o Banco de Dados
BancoDeDados_Acoes = IBOVdatabase[[1]][,c(6,5)] #Extrair as colunas 7 e 6 do dataframe 1
colnames(BancoDeDados_Acoes) = c("Data",paste(IBOVdatabase[[1]][1,7])) #Renomeando as colunas
#teste <- IBOVdatabase[[1]]
for(i in 2:length(IBOVdatabase)){
itera_BancoDeDados_Acoes = IBOVdatabase[[i]][,c(6,5)]
colnames(itera_BancoDeDados_Acoes) = c("Data",paste(IBOVdatabase[[i]][1,7])) #Renomeando as colunas
BancoDeDados_Acoes = merge(BancoDeDados_Acoes,itera_BancoDeDados_Acoes, by = "Data") #Juntando os dataframes usando a Data como coluna chave para fazer os joins.
}
rm(itera_BancoDeDados_Acoes)
#rm(IBOVdatabase)
#df_info = get_info_companies()
#names(df_info)
#Tratamento para comecar a partir de 2016
BancoDeDados_Acoes = BancoDeDados_Acoes[-(1:184),]
##Banco de Dados mais apurado com descrição e os tickers.
df_emp <-  GetDFPData::gdfpd.get.info.companies()
df_emp <-  df_emp %>% select(c(1,11:14))
#Tirar os duplicados
df_emp <-  df_emp[!duplicated(df_emp), ]
#Tirar as empresas que nao tem um pregao
df_emp <- df_emp %>% filter(tickers!="")
names(df_emp) = c("Nome","Setor","Subsetor","Segmento","Tickers")
#Remover espacos entre as strings
df_emp$Nome    <- str_squish(df_emp$Nome    )
df_emp$Setor   <- str_squish(df_emp$Setor   )
df_emp$Subsetor<- str_squish(df_emp$Subsetor)
df_emp$Segmento<- str_squish(df_emp$Segmento)
df_emp$Tickers <- str_squish(df_emp$Tickers )
df_emp$Nome    <- str_trim(df_emp$Nome    )
df_emp$Setor   <- str_trim(df_emp$Setor   )
df_emp$Subsetor<- str_trim(df_emp$Subsetor)
df_emp$Segmento<- str_trim(df_emp$Segmento)
df_emp$Tickers <- str_trim(df_emp$Tickers )
#Colocar em caixa alta
df_emp$Nome    <- str_to_upper(df_emp$Nome    )
df_emp$Setor   <- str_to_upper(df_emp$Setor   )
df_emp$Subsetor<- str_to_upper(df_emp$Subsetor)
df_emp$Segmento<- str_to_upper(df_emp$Segmento)
df_emp$Tickers <- str_to_upper(df_emp$Tickers )
rm(list=ls())
if(!is.null(dev.list())) dev.off()
cat("\014")
library(BatchGetSymbols)
library(tidyverse)
library(stringr)
library(plyr)
library(plotly)
library(reshape2)
library("twitteR")
library("wordcloud")
library("tm")
library("wordcloud2")
library("RColorBrewer")
------------------------------------------#acao = 'BBDC3.sa' #Empresa.sa -> para analisar alguma empresa em espec.
DI = '2015-01-01' #Data de inicio
#acao = 'BBDC3.sa' #Empresa.sa -> para analisar alguma empresa em espec.
DI = '2015-01-01' #Data de inicio
DF = Sys.Date() #Data de fim(hoje)
benchmark = '^BVSP' #índice da bolsa
tickersIbov = GetIbovStocks() #Retorna as ações negociadas do Brasil, dados completos.
tickersIbov = GetIbovStocks() #Retorna as ações negociadas do Brasil, dados completos.
tickersIbov$tickersSA = paste(tickersIbov$tickers,".SA",sep='') #Criar uma coluna e adicionar o .SA nos tickers
